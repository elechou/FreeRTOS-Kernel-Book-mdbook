# Summary

- [Mastering the FreeRTOSâ„¢ Real Time Kernel](booktitle.md)
- [List of Abbreviations](abbreviations.md#list-of-abbreviations)

- [1 Preface](ch01.md#1-preface)
  - [1.1 Multitasking in Small Embedded Systems](ch01.md#11-multitasking-in-small-embedded-systems)
    - [1.1.1 About the FreeRTOS Kernel](ch01.md#111-about-the-freertos-kernel)
    - [1.1.2 Value Proposition](ch01.md#112-value-proposition)
    - [1.1.3 A Note About Terminology](ch01.md#113-a-note-about-terminology)
    - [1.1.4 Why Use an RTOS?](ch01.md#114-why-use-an-rtos)
    - [1.1.5 FreeRTOS Kernel Features](ch01.md#115-freertos-kernel-features)
    - [1.1.6 Licensing, and The FreeRTOS, OpenRTOS, and SafeRTOS Family](ch01.md#116-licensing-and-the-freertos-openrtos-and-safertos-family)
  - [1.2 Included Source Files and Projects](ch01.md#12-included-source-files-and-projects)
    - [1.2.1 Obtaining the Examples that Accompany this Book](ch01.md#121-obtaining-the-examples-that-accompany-this-book)
- [2 The FreeRTOS Kernel Distribution](ch02.md#2-the-freertos-kernel-distribution)
  - [2.1 Introduction](ch02.md#21-introduction)
  - [2.2 Understanding the FreeRTOS Distribution](ch02.md#22-understanding-the-freertos-distribution)
    - [2.2.1 Definition: FreeRTOS Port](ch02.md#221-definition-freertos-port)
    - [2.2.2 Building FreeRTOS](ch02.md#222-building-freertos)
    - [2.2.3 FreeRTOSConfig.h](ch02.md#223-freertosconfigh)
    - [2.2.4 Official Distributions](ch02.md#224-official-distributions)
    - [2.2.5 FreeRTOS Source Files Common to All Ports](ch02.md#225-freertos-source-files-common-to-all-ports)
    - [2.2.6 FreeRTOS Source Files Specific to a Port](ch02.md#226-freertos-source-files-specific-to-a-port)
    - [2.2.7 Include Paths](ch02.md#227-include-paths)
    - [2.2.8 Header Files](ch02.md#228-header-files)
  - [2.3 Demo Applications](ch02.md#23-demo-applications)
  - [2.4 Creating a FreeRTOS Project](ch02.md#24-creating-a-freertos-project)
    - [2.4.1 Adapting One of the Supplied Demo Projects](ch02.md#241-adapting-one-of-the-supplied-demo-projects)
    - [2.4.2 Creating a New Project from Scratch](ch02.md#242-creating-a-new-project-from-scratch)
  - [2.5 Data Types and Coding Style Guide](ch02.md#25-data-types-and-coding-style-guide)
    - [2.5.1 Data Types](ch02.md#251-data-types)
    - [2.5.2 Variable Names](ch02.md#252-variable-names)
    - [2.5.3 Function Names](ch02.md#253-function-names)
    - [2.5.4 Formatting](ch02.md#254-formatting)
    - [2.5.5 Macro Names](ch02.md#255-macro-names)
    - [2.5.6 Rationale for Excessive Type Casting](ch02.md#256-rationale-for-excessive-type-casting)
- [3 Heap Memory Management](ch03.md#3-heap-memory-management)
  - [3.1 Introduction](ch03.md#31-introduction)
    - [3.1.1 Prerequisites](ch03.md#311-prerequisites)
    - [3.1.2 Scope](ch03.md#312-scope)
    - [3.1.3 Switching Between Static and Dynamic Memory Allocation](ch03.md#313-switching-between-static-and-dynamic-memory-allocation)
    - [3.1.4 Using Dynamic Memory Allocation](ch03.md#314-using-dynamic-memory-allocation)
    - [3.1.5 Options for Dynamic Memory Allocation](ch03.md#315-options-for-dynamic-memory-allocation)
  - [3.2 Example Memory Allocation Schemes](ch03.md#32-example-memory-allocation-schemes)
    - [3.2.1 Heap_1](ch03.md#321-heap_1)
    - [3.2.2 Heap_2](ch03.md#322-heap_2)
    - [3.2.3 Heap_3](ch03.md#323-heap_3)
    - [3.2.4 Heap_4](ch03.md#324-heap_4)
    - [3.2.5 Heap_5](ch03.md#325-heap_5)
    - [3.2.6 Initialising heap_5: The vPortDefineHeapRegions() API Function](ch03.md#326-initialising-heap_5-the-vportdefineheapregions-api-function)
  - [3.3 Heap Related Utility Functions and Macros](ch03.md#33-heap-related-utility-functions-and-macros)
    - [3.3.1 Defining the Heap Start Address](ch03.md#331-defining-the-heap-start-address)
    - [3.3.2 The xPortGetFreeHeapSize() API Function](ch03.md#332-the-xportgetfreeheapsize-api-function)
    - [3.3.3 The xPortGetMinimumEverFreeHeapSize() API Function](ch03.md#333-the-xportgetminimumeverfreeheapsize-api-function)
    - [3.3.4 The vPortGetHeapStats() API Function](ch03.md#334-the-vportgetheapstats-api-function)
    - [3.3.5 Collecting Per-task Heap Usage Statistics](ch03.md#335-collecting-per-task-heap-usage-statistics)
    - [3.3.6 Malloc Failed Hook Functions](ch03.md#336-malloc-failed-hook-functions)
    - [3.3.7 Placing Task Stacks in Fast Memory](ch03.md#337-placing-task-stacks-in-fast-memory)
  - [3.4 Using Static Memory Allocation](ch03.md#34-using-static-memory-allocation)
    - [3.4.1 Enabling Static Memory Allocation](ch03.md#341-enabling-static-memory-allocation)
    - [3.4.2 Static Internal Kernel Memory](ch03.md#342-static-internal-kernel-memory)
- [4 Task Management](ch04.md#4-task-management)
  - [4.1 Introduction](ch04.md#41-introduction)
    - [4.1.1 Scope](ch04.md#411-scope)
  - [4.2 Task Functions](ch04.md#42-task-functions)
  - [4.3 Top Level Task States](ch04.md#43-top-level-task-states)
  - [4.4 Task Creation](ch04.md#44-task-creation)
    - [4.4.1 The xTaskCreate() API Function](ch04.md#441-the-xtaskcreate-api-function)
  - [4.5 Task Priorities](ch04.md#45-task-priorities)
    - [4.5.1 Generic Scheduler](ch04.md#451-generic-scheduler)
    - [4.5.2 Architecture-Optimized Scheduler](ch04.md#452-architecture-optimized-scheduler)
  - [4.6 Time Measurement and the Tick Interrupt](ch04.md#46-time-measurement-and-the-tick-interrupt)
  - [4.7 Expanding the Not Running State](ch04.md#47-expanding-the-not-running-state)
    - [4.7.1 The Blocked State](ch04.md#471-the-blocked-state)
    - [4.7.2 The Suspended State](ch04.md#472-the-suspended-state)
    - [4.7.3 The Ready State](ch04.md#473-the-ready-state)
    - [4.7.4 Completing the State Transition Diagram](ch04.md#474-completing-the-state-transition-diagram)
    - [4.7.5 The vTaskDelayUntil() API Function](ch04.md#475-the-vtaskdelayuntil-api-function)
  - [4.8 The Idle Task and the Idle Task Hook](ch04.md#48-the-idle-task-and-the-idle-task-hook)
    - [4.8.1 Idle Task Hook Functions](ch04.md#481-idle-task-hook-functions)
    - [4.8.2 Limitations on the Implementation of Idle Task Hook Functions](ch04.md#482-limitations-on-the-implementation-of-idle-task-hook-functions)
  - [4.9 Changing the Priority of a Task](ch04.md#49-changing-the-priority-of-a-task)
    - [4.9.1 The vTaskPrioritySet() API Function](ch04.md#491-the-vtaskpriorityset-api-function)
    - [4.9.2 The uxTaskPriorityGet() API Function](ch04.md#492-the-uxtaskpriorityget-api-function)
  - [4.10 Deleting a Task](ch04.md#410-deleting-a-task)
    - [4.10.1 The vTaskDelete() API Function](ch04.md#4101-the-vtaskdelete-api-function)
- [5 Queue Management](ch05.md#5-queue-management)
  - [5.1 Introduction](ch05.md#51-introduction)
    - [5.1.1 Scope](ch05.md#511-scope)
  - [5.2 Characteristics of a Queue](ch05.md#52-characteristics-of-a-queue)
    - [5.2.1 Data Storage](ch05.md#521-data-storage)
    - [5.2.2 Access by Multiple Tasks](ch05.md#522-access-by-multiple-tasks)
    - [5.2.3 Blocking on Queue Reads](ch05.md#523-blocking-on-queue-reads)
    - [5.2.4 Blocking on Queue Writes](ch05.md#524-blocking-on-queue-writes)
    - [5.2.5 Blocking on Multiple Queues](ch05.md#525-blocking-on-multiple-queues)
    - [5.2.6 Creating Queues: Statically Allocated and Dynamically Allocated Queues](ch05.md#526-creating-queues-statically-allocated-and-dynamically-allocated-queues)
  - [5.3 Using a Queue](ch05.md#53-using-a-queue)
    - [5.3.1 The xQueueCreate() API Function](ch05.md#531-the-xqueuecreate-api-function)
    - [5.3.2 The xQueueSendToBack() and xQueueSendToFront() API Functions](ch05.md#532-the-xqueuesendtoback-and-xqueuesendtofront-api-functions)
    - [5.3.3 The xQueueReceive() API Function](ch05.md#533-the-xqueuereceive-api-function)
    - [5.3.4 The uxQueueMessagesWaiting() API Function](ch05.md#534-the-uxqueuemessageswaiting-api-function)
  - [5.4 Receiving Data From Multiple Sources](ch05.md#54-receiving-data-from-multiple-sources)
  - [5.5 Working with Large or Variable Sized Data](ch05.md#55-working-with-large-or-variable-sized-data)
    - [5.5.1 Queuing Pointers](ch05.md#551-queuing-pointers)
    - [5.5.2 Using a Queue to Send Different Types and Lengths of Data](ch05.md#552-using-a-queue-to-send-different-types-and-lengths-of-data)
  - [5.6 Receiving From Multiple Queues](ch05.md#56-receiving-from-multiple-queues)
    - [5.6.1 Queue Sets](ch05.md#561-queue-sets)
    - [5.6.2 The xQueueCreateSet() API Function](ch05.md#562-the-xqueuecreateset-api-function)
    - [5.6.3 The xQueueAddToSet() API Function](ch05.md#563-the-xqueueaddtoset-api-function)
    - [5.6.4 The xQueueSelectFromSet() API Function](ch05.md#564-the-xqueueselectfromset-api-function)
    - [5.6.5 More Realistic Queue Set Use Cases](ch05.md#565-more-realistic-queue-set-use-cases)
  - [5.7 Using a Queue to Create a Mailbox](ch05.md#57-using-a-queue-to-create-a-mailbox)
    - [5.7.1 The xQueueOverwrite() API Function](ch05.md#571-the-xqueueoverwrite-api-function)
    - [5.7.2 The xQueuePeek() API Function](ch05.md#572-the-xqueuepeek-api-function)
- [6 Software Timer Management](ch06.md#6-software-timer-management)
  - [6.1 Chapter Introduction and Scope](ch06.md#61-chapter-introduction-and-scope)
    - [6.1.1 Scope](ch06.md#611-scope)
  - [6.2 Software Timer Callback Functions](ch06.md#62-software-timer-callback-functions)
  - [6.3 Attributes and States of a Software Timer](ch06.md#63-attributes-and-states-of-a-software-timer)
    - [6.3.1 Period of a Software Timer](ch06.md#631-period-of-a-software-timer)
    - [6.3.2 One-shot and Auto-reload Timers](ch06.md#632-one-shot-and-auto-reload-timers)
    - [6.3.3 Software Timer States](ch06.md#633-software-timer-states)
  - [6.4 The Context of a Software Timer](ch06.md#64-the-context-of-a-software-timer)
    - [6.4.1 The RTOS Daemon (Timer Service) Task](ch06.md#641-the-rtos-daemon-timer-service-task)
    - [6.4.2 The Timer Command Queue](ch06.md#642-the-timer-command-queue)
    - [6.4.3 Daemon Task Scheduling](ch06.md#643-daemon-task-scheduling)
  - [6.5 Creating and Starting a Software Timer](ch06.md#65-creating-and-starting-a-software-timer)
    - [6.5.1 The xTimerCreate() API Function](ch06.md#651-the-xtimercreate-api-function)
    - [6.5.2 The xTimerStart() API Function](ch06.md#652-the-xtimerstart-api-function)
  - [6.6 The Timer ID](ch06.md#66-the-timer-id)
    - [6.6.1 The vTimerSetTimerID() API Function](ch06.md#661-the-vtimersettimerid-api-function)
    - [6.6.2 The pvTimerGetTimerID() API Function](ch06.md#662-the-pvtimergettimerid-api-function)
  - [6.7 Changing the Period of a Timer](ch06.md#67-changing-the-period-of-a-timer)
    - [6.7.1 The xTimerChangePeriod() API Function](ch06.md#671-the-xtimerchangeperiod-api-function)
  - [6.8 Resetting a Software Timer](ch06.md#68-resetting-a-software-timer)
    - [6.8.1 The xTimerReset() API Function](ch06.md#681-the-xtimerreset-api-function)
- [7 Interrupt Management](ch07.md#7-interrupt-management)
  - [7.1 Introduction](ch07.md#71-introduction)
    - [7.1.1 Events](ch07.md#711-events)
    - [7.1.2 Scope](ch07.md#712-scope)
  - [7.2 Using the FreeRTOS API from an ISR](ch07.md#72-using-the-freertos-api-from-an-isr)
    - [7.2.1 The Interrupt Safe API](ch07.md#721-the-interrupt-safe-api)
    - [7.2.2 The Benefits of Using a Separate Interrupt Safe API](ch07.md#722-the-benefits-of-using-a-separate-interrupt-safe-api)
    - [7.2.3 The Disadvantages of Using a Separate, Interrupt Safe API](ch07.md#723-the-disadvantages-of-using-a-separate-interrupt-safe-api)
    - [7.2.4 The xHigherPriorityTaskWoken Parameter](ch07.md#724-the-xhigherprioritytaskwoken-parameter)
    - [7.2.5 The portYIELD_FROM_ISR() and portEND_SWITCHING_ISR() Macros](ch07.md#725-the-portyield_from_isr-and-portend_switching_isr-macros)
  - [7.3 Deferred Interrupt Processing](ch07.md#73-deferred-interrupt-processing)
  - [7.4 Binary Semaphores Used for Synchronization](ch07.md#74-binary-semaphores-used-for-synchronization)
    - [7.4.1 The xSemaphoreCreateBinary() API Function](ch07.md#741-the-xsemaphorecreatebinary-api-function)
    - [7.4.2 The xSemaphoreTake() API Function](ch07.md#742-the-xsemaphoretake-api-function)
    - [7.4.3 The xSemaphoreGiveFromISR() API Function](ch07.md#743-the-xsemaphoregivefromisr-api-function)
    - [7.4.4 Improving the Implementation of the Task Used in Example 7.1](ch07.md#744-improving-the-implementation-of-the-task-used-in-example-71)
  - [7.5 Counting Semaphores](ch07.md#75-counting-semaphores)
    - [7.5.1 The xSemaphoreCreateCounting() API Function](ch07.md#751-the-xsemaphorecreatecounting-api-function)
  - [7.6 Deferring Work to the RTOS Daemon Task](ch07.md#76-deferring-work-to-the-rtos-daemon-task)
    - [7.6.1 The xTimerPendFunctionCallFromISR() API Function](ch07.md#761-the-xtimerpendfunctioncallfromisr-api-function)
  - [7.7 Using Queues within an Interrupt Service Routine](ch07.md#77-using-queues-within-an-interrupt-service-routine)
    - [7.7.1 The xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() API Functions](ch07.md#771-the-xqueuesendtofrontfromisr-and-xqueuesendtobackfromisr-api-functions)
    - [7.7.2 Considerations When Using a Queue From an ISR](ch07.md#772-considerations-when-using-a-queue-from-an-isr)
  - [7.8 Interrupt Nesting](ch07.md#78-interrupt-nesting)
    - [7.8.1 A Note to ARM Cortex-M and ARM GIC Users](ch07.md#781-a-note-to-arm-cortex-m-and-arm-gic-users)
- [8 Resource Management](ch08.md#8-resource-management)
  - [8.1 Chapter Introduction and Scope](ch08.md#81-chapter-introduction-and-scope)
    - [8.1.1 Mutual Exclusion](ch08.md#811-mutual-exclusion)
    - [8.1.2 Scope](ch08.md#812-scope)
  - [8.2 Critical Sections and Suspending the Scheduler](ch08.md#82-critical-sections-and-suspending-the-scheduler)
    - [8.2.1 Basic Critical Sections](ch08.md#821-basic-critical-sections)
    - [8.2.2 Suspending (or Locking) the Scheduler](ch08.md#822-suspending-or-locking-the-scheduler)
    - [8.2.3 The vTaskSuspendAll() API Function](ch08.md#823-the-vtasksuspendall-api-function)
    - [8.2.4 The xTaskResumeAll() API Function](ch08.md#824-the-xtaskresumeall-api-function)
  - [8.3 Mutexes (and Binary Semaphores)](ch08.md#83-mutexes-and-binary-semaphores)
    - [8.3.1 The xSemaphoreCreateMutex() API Function](ch08.md#831-the-xsemaphorecreatemutex-api-function)
    - [8.3.2 Priority Inversion](ch08.md#832-priority-inversion)
    - [8.3.3 Priority Inheritance](ch08.md#833-priority-inheritance)
    - [8.3.4 Deadlock (or Deadly Embrace)](ch08.md#834-deadlock-or-deadly-embrace)
    - [8.3.5 Recursive Mutexes](ch08.md#835-recursive-mutexes)
    - [8.3.6 Mutexes and Task Scheduling](ch08.md#836-mutexes-and-task-scheduling)
  - [8.4 Gatekeeper Tasks](ch08.md#84-gatekeeper-tasks)
    - [8.4.1 Re-writing vPrintString() to use a gatekeeper task](ch08.md#841-re-writing-vprintstring-to-use-a-gatekeeper-task)
- [9 Event Groups](ch09.md#9-event-groups)
  - [9.1 Chapter Introduction and Scope](ch09.md#91-chapter-introduction-and-scope)
    - [9.1.1 Scope](ch09.md#911-scope)
  - [9.2 Characteristics of an Event Group](ch09.md#92-characteristics-of-an-event-group)
    - [9.2.1 Event Groups, Event Flags and Event Bits](ch09.md#921-event-groups-event-flags-and-event-bits)
    - [9.2.2 More About the EventBits_t Data Type](ch09.md#922-more-about-the-eventbits_t-data-type)
    - [9.2.3 Access by Multiple Tasks](ch09.md#923-access-by-multiple-tasks)
    - [9.2.4 A Practical Example of Using an Event Group](ch09.md#924-a-practical-example-of-using-an-event-group)
  - [9.3 Event Management Using Event Groups](ch09.md#93-event-management-using-event-groups)
    - [9.3.1 The xEventGroupCreate() API Function](ch09.md#931-the-xeventgroupcreate-api-function)
    - [9.3.2 The xEventGroupSetBits() API Function](ch09.md#932-the-xeventgroupsetbits-api-function)
    - [9.3.3 The xEventGroupSetBitsFromISR() API Function](ch09.md#933-the-xeventgroupsetbitsfromisr-api-function)
    - [9.3.4 The xEventGroupWaitBits() API Function](ch09.md#934-the-xeventgroupwaitbits-api-function)
    - [9.3.5 The xEventGroupGetStaticBuffer() API Function](ch09.md#935-the-xeventgroupgetstaticbuffer-api-function)
  - [9.4 Task Synchronization Using an Event Group](ch09.md#94-task-synchronization-using-an-event-group)
    - [9.4.1 The xEventGroupSync() API Function](ch09.md#941-the-xeventgroupsync-api-function)
- [10 Task Notifications](ch10.md#10-task-notifications)
  - [10.1 Introduction](ch10.md#101-introduction)
    - [10.1.1 Communicating Through Intermediary Objects](ch10.md#1011-communicating-through-intermediary-objects)
    - [10.1.2 Task Notificationsâ€”Direct to Task Communication](ch10.md#1012-task-notifications---direct-to-task-communication)
    - [10.1.3 Scope](ch10.md#1013-scope)
  - [10.2 Task Notifications; Benefits and Limitations](ch10.md#102-task-notifications-benefits-and-limitations)
    - [10.2.1 Performance Benefits of Task Notifications](ch10.md#1021-performance-benefits-of-task-notifications)
    - [10.2.2 RAM Footprint Benefits of Task Notifications](ch10.md#1022-ram-footprint-benefits-of-task-notifications)
    - [10.2.3 Limitations of Task Notifications](ch10.md#1023-limitations-of-task-notifications)
  - [10.3 Using Task Notifications](ch10.md#103-using-task-notifications)
    - [10.3.1 Task Notification API Options](ch10.md#1031-task-notification-api-options)
    - [10.3.2 The xTaskNotifyGive() API Functions](ch10.md#1032-the-xtasknotifygive-api-functions)
    - [10.3.3 The vTaskNotifyGiveFromISR() API Function](ch10.md#1033-the-vtasknotifygivefromisr-api-function)
    - [10.3.4 The ulTaskNotifyTake() API Function](ch10.md#1034-the-ultasknotifytake-api-function)
    - [10.3.5 The xTaskNotify() and xTaskNotifyFromISR() API Functions](ch10.md#1035-the-xtasknotify-and-xtasknotifyfromisr-api-functions)
    - [10.3.6 The xTaskNotifyWait() API Function](ch10.md#1036-the-xtasknotifywait-api-function)
    - [10.3.7 Task Notifications Used in Peripheral Device Drivers: UART Example](ch10.md#1037-task-notifications-used-in-peripheral-device-drivers-uart-example)
    - [10.3.8 Task Notifications Used in Peripheral Device Drivers: ADC Example](ch10.md#1038-task-notifications-used-in-peripheral-device-drivers-adc-example)
    - [10.3.9 Task Notifications Used Directly Within an Application](ch10.md#1039-task-notifications-used-directly-within-an-application)
- [11 Low Power Support](ch11.md#11-low-power-support)
  - [11.1 Power Saving Introduction](ch11.md#111-power-saving-introduction)
  - [11.2 FreeRTOS Sleep Modes](ch11.md#112-freertos-sleep-modes)
  - [11.3 Functions and Enabling Built-in Tickless Idle Functionality](ch11.md#113-functions-and-enabling-built-in-tickless-idle-functionality)
    - [11.3.1 The portSUPPRESS_TICKS_AND_SLEEP() Macro](ch11.md#1131-the-portsuppress_ticks_and_sleep-macro)
    - [11.3.2 The vPortSuppressTicksAndSleep Function](ch11.md#1132-the-vportsuppressticksandsleep-function)
    - [11.3.3 The eTaskConfirmSleepModeStatus Function](ch11.md#1133-the-etaskconfirmsleepmodestatus-function)
    - [11.3.4 The configPRE_SLEEP_PROCESSING configuration](ch11.md#1134-the-configpre_sleep_processing-configuration)
    - [11.3.5 The configPOST_SLEEP_PROCESSING configuration](ch11.md#1135-the-configpost_sleep_processing-configuration)
  - [11.4 Implementing portSUPPRESS_TICKS_AND_SLEEP() Macro](ch11.md#114-implementing-portsuppress_ticks_and_sleep-macro)
  - [11.5 Idle Task Hook Function](ch11.md#115-idle-task-hook-function)
- [12 Developer Support](ch12.md#12-developer-support)
  - [12.1 Introduction](ch12.md#121-introduction)
  - [12.2 configASSERT()](ch12.md#122-configassert)
    - [12.2.1 Example configASSERT() definitions](ch12.md#1221-example-configassert-definitions)
  - [12.3 Tracealyzer for FreeRTOS](ch12.md#123-tracealyzer-for-freertos)
  - [12.4 Debug Related Hook (Callback) Functions](ch12.md#124-debug-related-hook-callback-functions)
    - [12.4.1 Malloc failed hook](ch12.md#1241-malloc-failed-hook)
    - [12.4.2 Stack overflow hook](ch12.md#1242-stack-overflow-hook)
  - [12.5 Viewing Run-time and Task State Information](ch12.md#125-viewing-run-time-and-task-state-information)
    - [12.5.1 Task Run-Time Statistics](ch12.md#1251-task-run-time-statistics)
    - [12.5.2 The Run-Time Statistics Clock](ch12.md#1252-the-run-time-statistics-clock)
    - [12.5.3 Configuring an Application to Collect Run-Time Statistics](ch12.md#1253-configuring-an-application-to-collect-run-time-statistics)
    - [12.5.4 The uxTaskGetSystemState() API Function](ch12.md#1254-the-uxtaskgetsystemstate-api-function)
    - [12.5.5 The vTaskListTasks() Helper Function](ch12.md#1255-the-vtasklisttasks-helper-function)
    - [12.5.6 The vTaskGetRunTimeStatistics() Helper Function](ch12.md#1256-the-vtaskgetruntimestatistics-helper-function)
    - [12.5.7 Generating and Displaying Run-Time Statistics, a Worked Example](ch12.md#1257-generating-and-displaying-run-time-statistics-a-worked-example)
  - [12.6 Trace Hook Macros](ch12.md#126-trace-hook-macros)
    - [12.6.1 Available Trace Hook Macros](ch12.md#1261-available-trace-hook-macros)
    - [12.6.2 Defining Trace Hook Macros](ch12.md#1262-defining-trace-hook-macros)
    - [12.6.3 FreeRTOS Aware Debugger Plug-ins](ch12.md#1263-freertos-aware-debugger-plug-ins)
- [13 Troubleshooting](ch13.md#13-troubleshooting)
  - [13.1 Chapter Introduction and Scope](ch13.md#131-chapter-introduction-and-scope)
  - [13.2 Interrupt Priorities](ch13.md#132-interrupt-priorities)
  - [13.3 Stack Overflow](ch13.md#133-stack-overflow)
    - [13.3.1 The uxTaskGetStackHighWaterMark() API Function](ch13.md#1331-the-uxtaskgetstackhighwatermark-api-function)
    - [13.3.2 Run Time Stack Checkingâ€”Overview](ch13.md#1332-run-time-stack-checking---overview)
    - [13.3.3 Run Time Stack Checkingâ€”Method 1](ch13.md#1333-run-time-stack-checking---method-1)
    - [13.3.4 Run Time Stack Checkingâ€”Method 2](ch13.md#1334-run-time-stack-checking---method-2)
    - [13.3.4 Run Time Stack Checkingâ€”Method 3](ch13.md#1334-run-time-stack-checking---method-3)
  - [13.4 Use of printf() and sprintf()](ch13.md#134-use-of-printf-and-sprintf)
    - [13.4.1 Printf-stdarg.c](ch13.md#1341-printf-stdargc)
  - [13.5 Other Common Sources of Error](ch13.md#135-other-common-sources-of-error)
    - [13.5.1 Symptom: Adding a simple task to a demo causes the demo to crash](ch13.md#1351-symptom-adding-a-simple-task-to-a-demo-causes-the-demo-to-crash)
    - [13.5.2 Symptom: Using an API function within an interrupt causes the application to crash](ch13.md#1352-symptom-using-an-api-function-within-an-interrupt-causes-the-application-to-crash)
    - [13.5.3 Symptom: Sometimes the application crashes within an interrupt service routine](ch13.md#1353-symptom-sometimes-the-application-crashes-within-an-interrupt-service-routine)
    - [13.5.4 Symptom: The scheduler crashes when attempting to start the first task](ch13.md#1354-symptom-the-scheduler-crashes-when-attempting-to-start-the-first-task)
    - [13.5.5 Symptom: Interrupts are unexpectedly left disabled, or critical sections do not nest correctly](ch13.md#1355-symptom-interrupts-are-unexpectedly-left-disabled-or-critical-sections-do-not-nest-correctly)
    - [13.5.6 Symptom: The application crashes even before the scheduler is started](ch13.md#1356-symptom-the-application-crashes-even-before-the-scheduler-is-started)
    - [13.5.7 Symptom: Calling API functions while the scheduler is suspended, or from inside a critical section, causes the application to crash](ch13.md#1357-symptom-calling-api-functions-while-the-scheduler-is-suspended-or-from-inside-a-critical-section-causes-the-application-to-crash)
  - [13.6 Additional Debugging Steps](ch13.md#136-additional-debugging-steps)
